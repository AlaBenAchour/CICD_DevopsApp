trigger:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: self

variables:
  dockerRegistryServiceConnection: 'acba34a4-0ebc-442d-941f-8eb99adbf80e'
  containerRegistry: 'reactwebsite.azurecr.io'
  imageRepositoryBackend: 'alabenachourapp-backend'
  imageRepositoryFrontend: 'alabenachourapp-frontend'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  k8sNamespace: 'default'

stages:
- stage: Build
  displayName: Build and Push Docker Images
  jobs:
    - job: Build
      displayName: Build Docker Images and Push to ACR
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: Docker@2
          displayName: 'Login to Azure Container Registry'
          inputs:
            command: 'login'
            containerRegistry: $(dockerRegistryServiceConnection)

        - task: DockerCompose@1
          displayName: 'Build Images with Docker Compose'
          inputs:
            containerregistry: $(dockerRegistryServiceConnection)
            dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
            projectName: 'app-node-devops'
            action: 'Build services'
            tags: |
              $(tag)
              latest
          env:
            TAG: $(tag)

        - task: DockerCompose@1
          displayName: 'Push Images to ACR'
          inputs:
            containerregistry: $(dockerRegistryServiceConnection)
            dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
            projectName: 'app-node-devops'
            action: 'Push services'
          env:
            TAG: $(tag)

- stage: Deploy
  displayName: Deploy to Kubernetes
  dependsOn: Build
  jobs:
    - job: Deploy
      displayName: Deploy to Kubernetes Cluster
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: Kubernetes@1
          displayName: 'Set Kubernetes Context'
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscriptionEndpoint: 'Azure for Students(d78f780f-5e9b-44c8-8b35-a12585e1a6a5)'
            azureResourceGroup: 'AppNodeDevops'
            kubernetesCluster: 'app-demo'
            namespace: $(k8sNamespace)

        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/manifests'
            Contents: '**/*'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/manifests'

        - script: |
            echo "Deploying application to Kubernetes"
            kubectl apply -f $(Build.ArtifactStagingDirectory)/manifests/deployment.yml --validate=false -n $(k8sNamespace)
            kubectl apply -f $(Build.ArtifactStagingDirectory)/manifests/service.yml --validate=false -n $(k8sNamespace)
          displayName: Deploy Manifests to Kubernetes

        - script: |
            echo "Checking deployment status..."
            kubectl rollout status deployment/api-server -n $(k8sNamespace)
            kubectl rollout status deployment/react-app -n $(k8sNamespace)
          displayName: Check Deployment Status

        - script: |
            echo "Kubernetes Services:"
            kubectl get services -n $(k8sNamespace)
          displayName: Get Services Information

          
# - stage: Deploy
#   displayName: Deploy Stage
#   dependsOn: Build
#   jobs:
#     - deployment: Deploy
#       displayName: Deploy to Kubernetes
#       pool:
#         vmImage: $(vmImageName)
#       environment: 'app-demo' 
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - task: KubernetesManifest@1
#               displayName: Create imagePullSecret
#               inputs:
#                 action: createSecret
#                 namespace: $(k8sNamespace)
#                 secretName: $(imagePullSecret)
#                 dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
#                 kubernetesServiceEndpoint: $(kubernetesServiceConnection)

            
#             - task: KubernetesManifest@1
#               displayName: Deploy to Kubernetes Cluster
#               inputs:
#                 action: deploy
#                 namespace: $(k8sNamespace)
#                 manifests: |
#                   $(Build.SourcesDirectory)/manifests/deployment.yml
#                   $(Build.SourcesDirectory)/manifests/service.yml
#                 containers: |
#                   $(containerRegistry)/$(imageRepositoryBackend):$(tag)
#                   $(containerRegistry)/$(imageRepositoryFrontend):$(tag)
