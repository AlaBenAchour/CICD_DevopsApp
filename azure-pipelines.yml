# # trigger:
# # - main

# # resources:
# # - repo: self

# trigger:
#   branches:
#     include:
#       - main  

# resources:
#   repositories:
#     - repository: self  

# variables:
#   dockerRegistryServiceConnection: 'acba34a4-0ebc-442d-941f-8eb99adbf80e'
#   containerRegistry: 'reactwebsite.azurecr.io'
#   imageRepositoryBackend: 'alabenachourapp-backend'
#   imageRepositoryFrontend: 'alabenachourapp-frontend'
#   tag: '$(Build.BuildId)'
#   vmImageName: 'ubuntu-latest'
#   k8sNamespace: 'default' # Set the Kubernetes namespace
#   imagePullSecret: 'acr-secret' # Define a secret name for pulling images from ACR
#   kubernetesServiceConnection: 'myappkubernetes'

# stages:
# - stage: 
#   displayName: Run Test cases using jest
#   jobs:
#     - job: Test
#       displayName: Run Test Cases
#       steps:
#       - task: NodeTool@0
#         inputs:
#           versionSource: 'spec'
#           versionSpec: '18.x'
#         displayName: Set up Node.js
#       - task: Npm@1
#         inputs:
#           command: 'install'
#           workingDir: 'frontend'
#         displayName: Install dependencies
#       - task: Npm@1
#         inputs:
#           command: 'custom'
#           customCommand: 'run test -- --watchAll=false'
#           workingDir: 'frontend'
#         displayName: Run Jest tests
# - stage: Build
#   displayName: Build and Push Stage
#   jobs:
#   - job: Build
#     displayName: Build and Push Docker Images
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - checkout: self

#     # Docker login step
#     - task: Docker@2
#       displayName: 'Login to Azure Container Registry'
#       inputs:
#         command: 'login'
#         containerRegistry: $(dockerRegistryServiceConnection)

#     - task: DockerCompose@1
#       displayName: Build Images with Docker Compose
#       inputs:
#         containerregistry: $(dockerRegistryServiceConnection)
#         dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
#         projectName: 'app-node-devops'
#         action: 'Build services'
#         addPipelineDataAsLabels: false
#         tags: |
#           $(tag)
#           latest
#       env:
#         TAG: $(tag)

#     - task: DockerCompose@1
#       displayName: Push Images with Docker Compose
#       inputs:
#         containerregistry: $(dockerRegistryServiceConnection)
#         dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
#         projectName: 'app-node-devops'
#         action: 'Push services'
#       env:
#         TAG: $(tag)
# - stage: Deploy
#   displayName: Deploy Stage
#   dependsOn: Build
#   jobs:
#     - deployment: Deploy
#       displayName: Deploy to Kubernetes
#       pool:
#         vmImage: $(vmImageName)
#       environment: 'app-demo' 
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - task: KubernetesManifest@0
#               displayName: Create imagePullSecret
#               inputs:
#                 action: createSecret
#                 namespace: $(k8sNamespace)
#                 secretName: $(imagePullSecret)
#                 dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
#                 kubernetesServiceConnection: $(kubernetesServiceConnection) # Reference variable here

#             - task: KubernetesManifest@0
#               displayName: Deploy to Kubernetes Cluster
#               inputs:
#                 action: deploy
#                 namespace: $(k8sNamespace)
#                 manifests: |
#                   $(System.ArtifactsDirectory)/manifests/deployment.yml
#                   $(System.ArtifactsDirectory)/manifests/service.yml
#                 containers: |
#                   $(containerRegistry)/$(imageRepositoryBackend):$(tag)
#                   $(containerRegistry)/$(imageRepositoryFrontend):$(tag)
trigger:
  branches:
    include:
      - main  

resources:
  repositories:
    - repository: self  

variables:
  dockerRegistryServiceConnection: 'acba34a4-0ebc-442d-941f-8eb99adbf80e'
  containerRegistry: 'reactwebsite.azurecr.io'
  imageRepositoryBackend: 'alabenachourapp-backend'
  imageRepositoryFrontend: 'alabenachourapp-frontend'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  k8sNamespace: 'default' # Set the Kubernetes namespace
  imagePullSecret: 'acr-secret' # Define a secret name for pulling images from ACR
  kubernetesServiceConnection: 'myappkubernetes'

stages:
- stage: RunTests
  displayName: Run Test Cases using Jest
  jobs:
    - job: Test
      displayName: Run Test Cases
      steps:
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '18.x'
        displayName: Set up Node.js
      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: 'frontend'
        displayName: Install dependencies
      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test -- --watchAll=false'
          workingDir: 'frontend'
        displayName: Run Jest tests

- stage: Build
  displayName: Build and Push Stage
  jobs:
  - job: Build
    displayName: Build and Push Docker Images
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self

    # Docker login step
    - task: Docker@2
      displayName: 'Login to Azure Container Registry'
      inputs:
        command: 'login'
        containerRegistry: $(dockerRegistryServiceConnection)

    - task: DockerCompose@1
      displayName: Build Images with Docker Compose
      inputs:
        containerregistry: $(dockerRegistryServiceConnection)
        dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
        projectName: 'app-node-devops'
        action: 'Build services'
        addPipelineDataAsLabels: false
        tags: |
          $(tag)
          latest
      env:
        TAG: $(tag)

    - task: DockerCompose@1
      displayName: Push Images with Docker Compose
      inputs:
        containerregistry: $(dockerRegistryServiceConnection)
        dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
        projectName: 'app-node-devops'
        action: 'Push services'
      env:
        TAG: $(tag)

- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build
  jobs:
    - deployment: Deploy
      displayName: Deploy to Kubernetes
      pool:
        vmImage: $(vmImageName)
      environment: 'app-demo' 
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubernetesManifest@1
              displayName: Create imagePullSecret
              inputs:
                action: createSecret
                namespace: $(k8sNamespace)
                secretName: $(imagePullSecret)
                dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                kubernetesServiceConnection: $(kubernetesServiceConnection)

            - task: KubernetesManifest@1
              displayName: Deploy to Kubernetes Cluster
              inputs:
                action: deploy
                namespace: $(k8sNamespace)
                manifests: |
                  $(System.ArtifactsDirectory)/manifests/deployment.yml
                  $(System.ArtifactsDirectory)/manifests/service.yml
                containers: |
                  $(containerRegistry)/$(imageRepositoryBackend):$(tag)
                  $(containerRegistry)/$(imageRepositoryFrontend):$(tag)
