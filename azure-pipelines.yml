
trigger:
  branches:
    include:
      - main  

resources:
  repositories:
    - repository: self  

variables:
  dockerRegistryServiceConnection: 'acba34a4-0ebc-442d-941f-8eb99adbf80e'
  containerRegistry: 'reactwebsite.azurecr.io'
  imageRepositoryBackend: 'alabenachourapp-backend'
  imageRepositoryFrontend: 'alabenachourapp-frontend'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  k8sNamespace: 'default'
  # imagePullSecret: 'acr-secret'
  # kubernetesServiceConnection: 'app-demo-app-demo-default-1732626995245'

stages:
- stage: RunTests
  displayName: Run Test Cases using Jest
  jobs:
    - job: Test
      displayName: Run Test Cases
      steps:
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '18.x'
        displayName: Set up Node.js
      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: 'frontend'
        displayName: Install dependencies
      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test -- --watchAll=false'
          workingDir: 'frontend'
        displayName: Run Jest tests

- stage: Build
  displayName: Build and Push Stage
  jobs:
  - job: Build
    displayName: Build and Push Docker Images
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self

    # Docker login step
    - task: Docker@2
      displayName: 'Login to Azure Container Registry'
      inputs:
        command: 'login'
        containerRegistry: $(dockerRegistryServiceConnection)

    - task: DockerCompose@1
      displayName: Build Images with Docker Compose
      inputs:
        containerregistry: $(dockerRegistryServiceConnection)
        dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
        projectName: 'app-node-devops'
        action: 'Build services'
        addPipelineDataAsLabels: false
        tags: |
          $(tag)
          latest
      env:
        TAG: $(tag)

    - task: DockerCompose@1
      displayName: Push Images with Docker Compose
      inputs:
        containerregistry: $(dockerRegistryServiceConnection)
        dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
        projectName: 'app-node-devops'
        action: 'Push services'
      env:
        TAG: $(tag)

- stage: ListFiles
  displayName: List Files in /home/vsts/work/1/s/
  jobs:
    - job: ListFiles
      displayName: List Files in /home/vsts/work/1/s/
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - script: |
            echo "Listing files in /home/vsts/work/1/s/"
            ls /home/vsts/work/1/s/
          displayName: 'List files in /home/vsts/work/1/s/'
- stage: Deploy
  displayName: Deploy to Kubernetes
  dependsOn: Build
  jobs:
    - job: Deploy
      displayName: Deploy to Kubernetes Cluster
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: Kubernetes@1
          displayName: 'Set Kubernetes Context'
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscriptionEndpoint: 'Azure for Students(d78f780f-5e9b-44c8-8b35-a12585e1a6a5)'
            azureResourceGroup: 'AppNodeDevops'
            kubernetesCluster: 'app-demo'
            namespace: $(k8sNamespace)

        - script: |
            echo "Deploying application to Kubernetes"
            kubectl apply -f manifests/deployment.yml -n $(k8sNamespace)
            kubectl apply -f manifests/service.yml -n $(k8sNamespace)
          displayName: Deploy Manifests to Kubernetes

        - script: |
            echo "Checking deployment status..."
            kubectl rollout status deployment/api-server -n $(k8sNamespace)
            kubectl rollout status deployment/react-app -n $(k8sNamespace)
          displayName: Check Deployment Status

        - script: |
            echo "Kubernetes Services:"
            kubectl get services -n $(k8sNamespace)
          displayName: Get Services Information
          
# - stage: Deploy
#   displayName: Deploy Stage
#   dependsOn: Build
#   jobs:
#     - deployment: Deploy
#       displayName: Deploy to Kubernetes
#       pool:
#         vmImage: $(vmImageName)
#       environment: 'app-demo' 
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - task: KubernetesManifest@1
#               displayName: Create imagePullSecret
#               inputs:
#                 action: createSecret
#                 namespace: $(k8sNamespace)
#                 secretName: $(imagePullSecret)
#                 dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
#                 kubernetesServiceEndpoint: $(kubernetesServiceConnection)

            
#             - task: KubernetesManifest@1
#               displayName: Deploy to Kubernetes Cluster
#               inputs:
#                 action: deploy
#                 namespace: $(k8sNamespace)
#                 manifests: |
#                   $(Build.SourcesDirectory)/manifests/deployment.yml
#                   $(Build.SourcesDirectory)/manifests/service.yml
#                 containers: |
#                   $(containerRegistry)/$(imageRepositoryBackend):$(tag)
#                   $(containerRegistry)/$(imageRepositoryFrontend):$(tag)
