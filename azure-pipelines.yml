trigger:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: self

variables:
  dockerRegistryServiceConnection: 'acba34a4-0ebc-442d-941f-8eb99adbf80e'
  containerRegistry: 'reactwebsite.azurecr.io'
  imageRepositoryBackend: 'alabenachourapp-backend'
  imageRepositoryFrontend: 'alabenachourapp-frontend'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  k8sNamespace: 'default'
  # imagePullSecret: 'acr-secret'

stages:
- stage: RunTests
  displayName: Run Test Cases using Jest
  jobs:
    - job: Test
      displayName: Run Test Cases
      steps:
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '18.x'
        displayName: Set up Node.js
      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: 'frontend'
        displayName: Install dependencies
      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test -- --watchAll=false'
          workingDir: 'frontend'
        displayName: Run Jest tests

- stage: Build
  displayName: Build and Push Docker Images
  jobs:
    - job: Build
      displayName: Build Docker Images and Push to ACR
      pool:
        vmImage: $(vmImageName)
      steps:
        - checkout: self
        - task: Docker@2
          displayName: 'Login to Azure Container Registry'
          inputs:
            command: 'login'
            containerRegistry: $(dockerRegistryServiceConnection)

        - task: DockerCompose@1
          displayName: 'Build Images with Docker Compose'
          inputs:
            containerregistry: $(dockerRegistryServiceConnection)
            dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
            projectName: 'app-node-devops'
            action: 'Build services'
            tags: |
              $(tag)
              latest
          env:
            TAG: $(tag)

        - task: DockerCompose@1
          displayName: 'Push Images to ACR'
          inputs:
            containerregistry: $(dockerRegistryServiceConnection)
            dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
            projectName: 'app-node-devops'
            action: 'Push services'
          env:
            TAG: $(tag)
        - publish: $(Build.SourcesDirectory)/manifests
          artifact: manifests
- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build
  jobs:
    - deployment: Deploy
      displayName: Deploy to Kubernetes
      pool:
        vmImage: $(vmImageName)
      environment: 'app-demo.default' 
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              fetchDepth: 1
            # - task: KubernetesManifest@1
            #   displayName: Create imagePullSecret
            #   inputs:
            #     action: createSecret
            #     namespace: $(k8sNamespace)
            #     secretName: $(imagePullSecret)
            #     dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
            #     # kubernetesServiceEndpoint: $(kubernetesServiceConnection)

            - script: |
                if [ ! -f "$(Build.SourcesDirectory)/manifests/deployment.yml" ]; then echo "deployment.yml is missing"; exit 1; fi
                if [ ! -f "$(Build.SourcesDirectory)/manifests/service.yml" ]; then echo "service.yml is missing"; exit 1; fi
              displayName: 'Validate manifest files'
            - script: dir $(Build.SourcesDirectory)/manifests
              displayName: Cloning Manifest Files From Repo
            - task: KubernetesManifest@1
              displayName: Deploy to Kubernetes Cluster
              inputs:
                action: deploy
                namespace: $(k8sNamespace)
                manifests: |
                
                  $(Build.SourcesDirectory)/manifests/deployment.yml
                  $(Build.SourcesDirectory)/manifests/service.yml
                containers: |
                  $(containerRegistry)/$(imageRepositoryBackend):$(tag)
                  $(containerRegistry)/$(imageRepositoryFrontend):$(tag)
                validate: false

# - stage: Deploy
#   displayName: Deploy to Kubernetes
#   dependsOn: Build
#   jobs:
#     - job: Deploy
#       displayName: Deploy to Kubernetes Cluster
#       pool:
#         vmImage: $(vmImageName)
#       steps:
#         - task: Kubernetes@1
#           displayName: 'Set Kubernetes Context'
#           inputs:
#             connectionType: 'Azure Resource Manager'
#             azureSubscriptionEndpoint: 'ala-sc'
#             azureResourceGroup: 'AppNodeDevops'
#             kubernetesCluster: 'app-demo'
#             namespace: $(k8sNamespace)

#         - task: CopyFiles@2
#           inputs:
#             SourceFolder: '$(Build.SourcesDirectory)/manifests'
#             Contents: '**/*'
#             TargetFolder: '$(Build.ArtifactStagingDirectory)/manifests'

#         - script: |
#             echo "Deploying application to Kubernetes"
#             kubectl apply -f $(Build.ArtifactStagingDirectory)/manifests/deployment.yml --validate=false -n $(k8sNamespace)
#             kubectl apply -f $(Build.ArtifactStagingDirectory)/manifests/service.yml --validate=false -n $(k8sNamespace)
#           displayName: Deploy Manifests to Kubernetes

#         - script: |
#             echo "Checking deployment status..."
#             kubectl rollout status deployment/api-server -n $(k8sNamespace)
#             kubectl rollout status deployment/react-app -n $(k8sNamespace)
#           displayName: Check Deployment Status


#         - script: |
#             echo "Kubernetes Services:"
#             kubectl get services -n $(k8sNamespace)
#           displayName: Get Services Information

          

